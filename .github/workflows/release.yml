name: "Release"
on:
  workflow_call:
defaults:
  run:
    shell: bash
permissions:
  contents: write
  packages: write


jobs:

  release-binary:
    name: "Node binary"
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.set-version.outputs.RELEASE_VERSION }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required to fetch version
          persist-credentials: false

      - uses: actions/setup-go@v3
        with:
          go-version-file: ./go.mod
          cache: true

      - name: Download binary artifact
        uses: actions/download-artifact@v3
        id: download
        with:
          name: ${{ env.BIN_NAME }}
          path: .

      - name: Archive application binary
        run: tar czf ${{ env.BIN_NAME }}.tar.gz -C build ${{ env.BIN_NAME }}
        shell: bash


      - name: Set release version number
        id: set-version
        run: |
          RELEASE_VERSION=$( git describe --tags ${{ github.sha }})
          echo ::set-output name=RELEASE_VERSION::"$RELEASE_VERSION"

      - name: upload to GitHub (application binary)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.checks.outputs.upload_url }}
          asset_path: build/${{ env.BIN_NAME }}
          asset_name: ${{ env.BIN_NAME }}
          asset_content_type: application/octet-stream  # TODO check for less generic type

      - name: upload to GitHub (archived application binary)
        if: ${{ !matrix.tgz }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.checks.outputs.upload_url }}
          asset_path: build/${{ env.BIN_NAME }}${{ matrix.tgz_name_suffix }}
          asset_name: ${{ env.BIN_NAME }}${{ matrix.tgz_name_suffix }}
          asset_content_type: application/x-gtar

      - name: build cosmovisor binary
        if: ${{ !matrix.cosmovisor }}
        run: |
          go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor@v1.0.0
        shell: bash

      - name: get GOBIN
        id: get_gobin
        run: |
          GOPATH=${GOPATH:-${HOME}/go}
          GOBIN=${GOBIN:-${GOPATH}/bin}
          echo "$GOBIN"
          echo "::set-output name=gobin::$GOBIN"
        shell: bash

      - name: upload to GitHub (cosmovisor binary)
        if: ${{ !matrix.cosmovisor }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.checks.outputs.upload_url }}
          asset_path: ${{ steps.get_gobin.outputs.gobin }}/cosmovisor
          asset_name: cosmovisor
          asset_content_type: application/octet-stream  # TODO check for less generic type

      - name: upload to GitHub (service file)
        if: ${{ !matrix.service }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.checks.outputs.upload_url }}
          asset_path: deployment/cosmovisor.service
          asset_name: cosmovisor.service
          asset_content_type: text/plain



  release-docker:
    name: "Docker image"
    needs: release-binary
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          version: latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      
      - name: Configure Docker image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository}}
          flavor: |
            latest=auto
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-binary.outputs.RELEASE_VERSION }}
            type=raw,value=production-latest
            type=sha,format=long
          labels: |
            org.opencontainers.image.vendor="Canow"
            org.opencontainers.image.created={{date 'dddd, MMMM Do YYYY, h:mm:ss a'}}
#            org.opencontainers.image.documentation=""

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
